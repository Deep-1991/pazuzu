package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
)

// FeatureList feature list
// swagger:model FeatureList
type FeatureList struct {

	// links
	Links *FeatureListLinks `json:"_links,omitempty"`

	// features
	Features []*Feature `json:"features"`

	// The total number of features.
	TotalCount int64 `json:"total_count,omitempty"`
}

// Validate validates this feature list
func (m *FeatureList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFeatures(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeatureList) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {

		if err := m.Links.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *FeatureList) validateFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.Features) { // not required
		return nil
	}

	for i := 0; i < len(m.Features); i++ {

		if swag.IsZero(m.Features[i]) { // not required
			continue
		}

		if m.Features[i] != nil {

			if err := m.Features[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// FeatureListLinks feature list links
// swagger:model FeatureListLinks
type FeatureListLinks struct {

	// next
	Next *Link `json:"next,omitempty"`

	// prev
	Prev *Link `json:"prev,omitempty"`
}

// Validate validates this feature list links
func (m *FeatureListLinks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNext(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrev(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeatureListLinks) validateNext(formats strfmt.Registry) error {

	if swag.IsZero(m.Next) { // not required
		return nil
	}

	if m.Next != nil {

		if err := m.Next.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *FeatureListLinks) validatePrev(formats strfmt.Registry) error {

	if swag.IsZero(m.Prev) { // not required
		return nil
	}

	if m.Prev != nil {

		if err := m.Prev.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
