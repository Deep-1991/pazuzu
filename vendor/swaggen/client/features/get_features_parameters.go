package features

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetFeaturesParams creates a new GetFeaturesParams object
// with the default values initialized.
func NewGetFeaturesParams() *GetFeaturesParams {
	var (
		limitDefault  = int64(50)
		statusDefault = string("approved")
	)
	return &GetFeaturesParams{
		Limit:  &limitDefault,
		Status: &statusDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetFeaturesParamsWithTimeout creates a new GetFeaturesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetFeaturesParamsWithTimeout(timeout time.Duration) *GetFeaturesParams {
	var (
		limitDefault  = int64(50)
		statusDefault = string("approved")
	)
	return &GetFeaturesParams{
		Limit:  &limitDefault,
		Status: &statusDefault,

		timeout: timeout,
	}
}

// NewGetFeaturesParamsWithContext creates a new GetFeaturesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetFeaturesParamsWithContext(ctx context.Context) *GetFeaturesParams {
	var (
		limitDefault  = int64(50)
		statusDefault = string("approved")
	)
	return &GetFeaturesParams{
		Limit:  &limitDefault,
		Status: &statusDefault,

		Context: ctx,
	}
}

/*GetFeaturesParams contains all the parameters to send to the API endpoint
for the get features operation typically these are written to a http.Request
*/
type GetFeaturesParams struct {

	/*Author
	  Name of the author of the returned features.

	*/
	Author *string
	/*Fields
	  The fields present in the response (JSON Field).

	*/
	Fields *string
	/*Limit
	  Maximum number of features to return.

	*/
	Limit *int64
	/*Offset
	  The offset to start from.

	*/
	Offset *int64
	/*Q
	  Part of the name of the features the call should return.

	*/
	Q *string
	/*Status
	  Status of the features the call should return.

	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get features params
func (o *GetFeaturesParams) WithTimeout(timeout time.Duration) *GetFeaturesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get features params
func (o *GetFeaturesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get features params
func (o *GetFeaturesParams) WithContext(ctx context.Context) *GetFeaturesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get features params
func (o *GetFeaturesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithAuthor adds the author to the get features params
func (o *GetFeaturesParams) WithAuthor(author *string) *GetFeaturesParams {
	o.SetAuthor(author)
	return o
}

// SetAuthor adds the author to the get features params
func (o *GetFeaturesParams) SetAuthor(author *string) {
	o.Author = author
}

// WithFields adds the fields to the get features params
func (o *GetFeaturesParams) WithFields(fields *string) *GetFeaturesParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get features params
func (o *GetFeaturesParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithLimit adds the limit to the get features params
func (o *GetFeaturesParams) WithLimit(limit *int64) *GetFeaturesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get features params
func (o *GetFeaturesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get features params
func (o *GetFeaturesParams) WithOffset(offset *int64) *GetFeaturesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get features params
func (o *GetFeaturesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithQ adds the q to the get features params
func (o *GetFeaturesParams) WithQ(q *string) *GetFeaturesParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get features params
func (o *GetFeaturesParams) SetQ(q *string) {
	o.Q = q
}

// WithStatus adds the status to the get features params
func (o *GetFeaturesParams) WithStatus(status *string) *GetFeaturesParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get features params
func (o *GetFeaturesParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GetFeaturesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	if o.Author != nil {

		// query param author
		var qrAuthor string
		if o.Author != nil {
			qrAuthor = *o.Author
		}
		qAuthor := qrAuthor
		if qAuthor != "" {
			if err := r.SetQueryParam("author", qAuthor); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
