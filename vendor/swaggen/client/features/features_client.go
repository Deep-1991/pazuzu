package features

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new features API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for features API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAPIFeaturesID deletes feature

Delete this feature. In case when another features has links to this feature - nothing will be deleted and
error will be returned.

*/
func (a *Client) DeleteAPIFeaturesID(params *DeleteAPIFeaturesIDParams) (*DeleteAPIFeaturesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIFeaturesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIFeaturesID",
		Method:             "DELETE",
		PathPattern:        "/api/features/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIFeaturesIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIFeaturesIDNoContent), nil

}

/*
GetAPIFeatures lists all the features in pazuzu

Returns all the features without it's dependencies. Each features can further be accessed
one by one and the dependencies will be there

*/
func (a *Client) GetAPIFeatures(params *GetAPIFeaturesParams) (*GetAPIFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIFeaturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIFeatures",
		Method:             "GET",
		PathPattern:        "/api/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIFeaturesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIFeaturesOK), nil

}

/*
GetAPIFeaturesID gets full feature elements

Returns all the feature information, including dependencies

*/
func (a *Client) GetAPIFeaturesID(params *GetAPIFeaturesIDParams) (*GetAPIFeaturesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIFeaturesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIFeaturesID",
		Method:             "GET",
		PathPattern:        "/api/features/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIFeaturesIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIFeaturesIDOK), nil

}

/*
GetAPIFeaturesIDFiles gets list of files linked used in this feature
*/
func (a *Client) GetAPIFeaturesIDFiles(params *GetAPIFeaturesIDFilesParams) (*GetAPIFeaturesIDFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIFeaturesIDFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIFeaturesIDFiles",
		Method:             "GET",
		PathPattern:        "/api/features/{id}/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIFeaturesIDFilesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIFeaturesIDFilesOK), nil

}

/*
PostAPIFeatures creates a new feature

Creates a new feature with specified name, docker data, etc. Feature
name is checked to be unique.

*/
func (a *Client) PostAPIFeatures(params *PostAPIFeaturesParams) (*PostAPIFeaturesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIFeaturesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIFeatures",
		Method:             "POST",
		PathPattern:        "/api/features",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIFeaturesReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIFeaturesCreated), nil

}

/*
PutAPIFeaturesID replaces this feature s content

Replaces docker_data and dependencies for this feature. Recursion checking is performed on this step

*/
func (a *Client) PutAPIFeaturesID(params *PutAPIFeaturesIDParams) (*PutAPIFeaturesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIFeaturesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIFeaturesID",
		Method:             "PUT",
		PathPattern:        "/api/features/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIFeaturesIDReader{formats: a.formats},
		Context:            params.Context,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIFeaturesIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
